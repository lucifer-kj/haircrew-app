// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts  Account[]
  sessions  Session[]
  orders    Order[]
  reviews   Review[]
  cart      Cart?
  addresses Address[]  @relation("UserAddresses")
  wishlists Wishlist[] @relation("UserWishlists")
  passwordResetToken PasswordResetToken?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  image       String?
  slug        String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id           String   @id @default(cuid())
  name         String
  description  String?
  price        Decimal  @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2)
  images       String[]
  sku          String   @unique
  barcode      String?
  weight       Decimal? @db.Decimal(8, 2)
  dimensions   String?
  stock        Int      @default(0)
  isActive     Boolean  @default(true)
  isFeatured   Boolean  @default(false)
  slug         String   @unique
  categoryId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  category   Category    @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  reviews    Review[]
  cartItems  CartItem[]
  wishlists  Wishlist[]  @relation("ProductWishlists")

  @@map("products")
  @@index([categoryId])
  @@index([slug])
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  userId      String
  status      OrderStatus @default(PENDING)
  total       Decimal     @db.Decimal(10, 2)
  subtotal    Decimal     @db.Decimal(10, 2)
  tax         Decimal     @default(0) @db.Decimal(10, 2)
  shipping    Decimal     @default(0) @db.Decimal(10, 2)
  discount    Decimal     @default(0) @db.Decimal(10, 2)
  currency    String      @default("USD")
  
  // Shipping info
  shippingAddress Json?
  billingAddress  Json?
  
  // Payment info
  paymentMethod   String?
  paymentStatus   PaymentStatus @default(PENDING)
  stripePaymentId String?
  
  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  paidAt    DateTime?

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
  @@index([userId])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  productId  String
  rating     Int
  title      String?
  comment    String?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("reviews")
  @@index([productId])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String   @unique
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("password_reset_tokens")
}

model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Address {
  id      String @id @default(uuid())
  userId  String
  line1   String
  city    String
  pincode String
  state   String
  country String
  user    User   @relation("UserAddresses", fields: [userId], references: [id])

  @@map("addresses")
  @@index([userId])
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation("UserWishlists", fields: [userId], references: [id])
  product Product @relation("ProductWishlists", fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("wishlists")
  @@index([userId])
  @@index([productId])
}

model Setting {
  key   String @id
  value String
}

model NewsletterSignup {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())

  @@map("newsletter_signups")
}

model HelpRequest {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  type      HelpType
  createdAt DateTime @default(now())

  @@map("help_requests")
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  message   String
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  @@map("notifications")
}

model CarouselImage {
  id          String   @id @default(cuid())
  url         String
  altText     String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   // User ID who uploaded it
}

model WebVitals {
  id        String   @id @default(cuid())
  name      String   // CLS, FID, FCP, LCP, TTFB, etc.
  value     Float    // The metric value
  metricId  String   // Unique identifier for the metric
  delta     Float?   // The delta value
  url       String   // Page URL where metric was measured
  userAgent String?  // User agent string
  timestamp DateTime @default(now())
  
  @@map("web_vitals")
}


// Enums
enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum HelpType {
  QUERY
  COMPLAINT
}

